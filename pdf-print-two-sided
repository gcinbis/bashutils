#!/bin/bash
set -e

MYTEMP="$HOME/temp"

function cleanup() {
    # note: it is safer to delete the temporary directory, without filenames.
    echo "command rm -rf \"$1\""
    command rm -rf "$1"
}

# convert a pdf into grayscale
function printtwosided() {
    # no! local args=($*) -- does not handle quotes.
    # no! local narg=${#args[@]}
    local narg=$#
    local file="$1"

    if [ $narg -ne 1 ]
    then
        echo "USAGE: pdf-print-two-sided input.pdf"
        echo "Generates two temporary files, opens the pdf files, and then deletes the temporary files."
        echo ""
        echo "Since pdftk (a snap-app) behaves erratic with files under /tmp or /var/tmp, creates and uses a temp folder under \$HOME/temp."
        echo ""
        echo "Uses evince as the pdf reader."
        return 1
    fi

    # separate input name and extension
    inp_nopath=$(basename "$file") # first remove the preceding path
    inp_noext="${inp_nopath%.*}" 
    inp_ext="${inp_nopath##*.}" 
    if [ "$inp_ext" != "pdf" ]; then
        echo "Unexpected extension of the input: $inp_ext"
        return 1
    fi

    # determine output filenames
    mkdir -p "$MYTEMP"
    local tdir=`command mktemp -d -p "$MYTEMP"` # creates a directory 
    local out1="$tdir/${inp_noext}-FIRST.pdf"
    local out2="$tdir/${inp_noext}-SECOND.pdf"

    # avoid overwriting by mistake
    if [ -f "$out1" ]
    then
        echo "Output: $out1 already exists. First delete existing output file."
        return 1
    fi
    if [ -f "$out2" ]
    then
        echo "Output: $out2 already exists. First delete existing output file."
        return 1
    fi

    # snaps have difficult in accessing files under /tmp 
    # see: https://github.com/smoser/pdftk/issues/1

    cmd1="pdftk A=\"$file\" cat Aeven output \"$out2\""
    cmd2="pdftk A=\"$out2\" cat Aend-1 output \"$out1\""
    cmd3="pdftk A=\"$file\" cat Aodd output \"$out2\""

    # use eval to parse quotes properly (see more here: https://stackoverflow.com/questions/411495/build-argument-lists-containing-whitespace)
    echo $cmd1
    eval $cmd1
    eval $cmd2
    echo $cmd2
    eval $cmd3
    echo $cmd3
    echo "Files are now ready: $out1, $out2"
    ls -al "$out1" "$out2"

    # open the files
    echo "Opening $out1"
    evince "$out1"
    echo "Opening $out2"
    evince "$out2"
    cleanup "$tdir"
}

# ok with multiple quoted arguments
printtwosided "$@"



