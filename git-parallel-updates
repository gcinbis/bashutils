#!/bin/bash
# Author: Gokberk Cinbis, May 2020

set -e
 
# TODO in progress

function __git_parallel_updates__() {
    gitsyncroot
    status=$?
    if [ $status -eq 0 ]; then
        exit
    fi
}

function __git_parallel_updates__()
{
    local narg=$#

    if [ $narg -ne 2 ]
    then
        echo "git-parallel-updates <cmd> <all_git_root>"
        echo ""
        echo "Recursively find all git repositories located under all_git_root"
        echo "Run <cmd> within these directories via tmux-parallel-exec-at-dirs."
        echo "Automatically close panes with no errors."
        echo ""
        echo "EXAMPLES"
        echo "* git-parallel-updates 'git pull' ~/projects"
        echo "* git-parallel-updates 'gitsyncroot' ~/projects"
        exit 1
    fi

    if [[ cmd=='__git_parallel_updates_wrapper__ ]]; then

    fi
   
    local cmd="$1"
    local sc=`command mktemp` # temp script
    echo "command tmux new -d -s ${session_name}" > "$sc" # detached
    local j=0
    for (( j=2; j<=$narg; j++ )); do
        echo "command tmux send-keys -t ${session_name} \"command cd '${!j}'\" C-m" >> "$sc"
        echo "command tmux send-keys -t ${session_name} \"${cmd}\" C-m" >> "$sc"
        if [ $j -lt $narg ]; then
            if (($j > 0)) && ! ((($j-1) % $TMUX_PARALLEL_EXEC_MAX_PANES_PER_WINDOW)); then
                echo "command tmux new-window -t ${session_name}" >> "$sc"
            else
                echo "command tmux split-window -v -t ${session_name}" >> "$sc"
                echo "command tmux select-layout -t ${session_name} tiled"  >> "$sc"  # do this after every pane to create space for a new pane
            fi

        fi
    done
    echo "command tmux a -t ${session_name}" >> "$sc" # attach
    # cat "$sc" # just for debug

    # run the script
    chmod 755 "$sc"
    "$sc"
    rm -f "$sc"
}

# ok with multiple quoted arguments
__tmux__parallel_exec_at_dirs__ "$@"

# IMPLEMENTATION NOTES
# -- using tmux-parallel-exec as a wrapper complicates things (below) 
# -- for instance, $PWD may not be right, even if pwd is right
#printf "command tmux-parallel-exec " > "$sc"
#local j=0
#for (( j=2; j<=$narg; j++ ))
#do
#    # double-quates are not really necessary, below is simpler: printf "%s" "\" (cd \\\"${!j}\\\" && $cmd) \" " >> "$sc"
#    # (if there some path replacement, that'd be already done externally)
#    # Use ; instead of && as we don't know what cmd contains
#    command printf "%s" "\" command cd '${!j}' ; command pwd ; $cmd \" " >> "$sc"
#done
#echo "" >> "$sc" # add newline
# -- Therefore instead directly create the tmux script where we can send multiple command lines



