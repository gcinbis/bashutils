#!/bin/bash
set -e

# convert a pdf into grayscale
function func-addname-moddate() {
    # no! local args=($*) -- does not handle quotes.
    # no! local narg=${#args[@]}
    local narg=$#

    if [ $narg -eq 0 ]
    then
        echo "USAGE: addname-moddate file1 file2 ... fileN'"
        echo "Renames each file by adding modification date to each filename"
        echo " as a suffix before its last extension (if any)."
        echo ""
        echo "Reports errors for already existing target filenames and continues with the remaining ones."
        return 1
    fi

    for (( i = 1 ; i <= $narg; i++ ))
    do
        # separate input name and extension
        local f="${!i}"

 
        #local inp_nopath=$(basename "$file") # first remove the preceding path
        f_noext="${f%.*}" 
        f_ext="${f##*.}" 
        if [ "$f_ext" = "$f_noext" ]; then 
            f_ext=""
        else
            f_ext=".$f_ext"
        fi
        echo $f_noext
        echo $f_ext

        # partly from https://unix.stackexchange.com/questions/353083/add-modification-time-to-the-filename
        out="${f_noext}_$(date -r "$f" +'%Y-%m-%d_%H-%M')${f_ext}"

        if [ -e "$out" ]; then 
            print "ERROR: Already exists: $out$"
        else
            echo "$f -> $out"
            mv -n "$f" "$out"
        fi
    done

}

# ok with multiple quoted arguments
func-addname-moddate "$@"



