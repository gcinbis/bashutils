#!/usr/bin/env python3
#
# Author: Gokberk Cinbis
# September 2018

import sys
import xml.etree.ElementTree as ET

def printNode(subtree):
    # generic print
    print(ET.tostring(subtree, encoding='utf8', method='xml').decode())

def printAttachment(e,nsmap):
    # print attachment information
    #for child in e:
    #    print(child.tag, child.attrib)
    for child in e:
        if child.tag==('{' + nsmap['dc'] + '}title'):
            print(child.text)

def processXml(path):
    tree = ET.parse(path)
    root = tree.getroot()
    nsmap = dict([node for _, node in ET.iterparse(path,events=['start-ns'])])

    # note that namespaces are defined in the beginning of the RDF file:
    # xmlns:z="http://www.zotero.org/namespaces/export#"
    # Therefore, the following works:
    # found=root.findall("*[{http://www.zotero.org/namespaces/export#}linkMode='1']")
    # However, I prefer avoiding hard-coding the namespace, so this is bettter:
    found=root.findall("*[{" + nsmap['z'] + "}linkMode='1']")
    #doesn't work: found=root.findall("*/[{__Z__#}linkMode='1']",{'xmlns:z':'__Z__#'})

    for e in found:
        printAttachment(e,nsmap)

def run(sys):
    if not len(sys.argv)==2:
        print("Find non-linked attachments in a Zotero library")
        print("USAGE")
        print("zoteroFindNonLinkedFromRDF Zotero-RDF-Exported-Library-File-Path")
    else:
        processXml(sys.argv[1])

run(sys)






