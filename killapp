#!/bin/bash
set -e

if [[ $# < 1 ]]; then
    echo "DESCRIPTION"
    echo "Kill user processes matching to a regular expression. A confirmation is prompted before sending KILL signal."
    echo "USAGE"
    echo "killapp regexp"
    exit 1
fi

grep_cmd="grep -i \"$*\"" # add \"...\" to support patterns with spaces
out=`ps aux | grep "^$USER" | eval $grep_cmd` 
grep_no_quote="grep -i $*"

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

kill_pids=""

lines_exclude='== EXCLUDED =='
lines_include='== INCLUDED =='
any_exclude=0
any_include=0

# loop over lines
while read -r line; do
    arr=($line)
    pid="${arr[1]}"
    exclude=0
    if [[ $line == *${SCRIPTPATH}* ]]; then exclude=1; fi # if line contains the current script
    if [[ $line == *${grep_no_quote}* ]]; then exclude=1; fi # if line contains the grep command
    if [[ $$ == $pid ]]; then exclude=1; fi # if equal to pid of the script
    if [[ $$ == $grep_pid ]]; then exclude=1; fi # if equal to pid of the grep subprocess
    if [[ $exclude == 1 ]]; then
        lines_exclude="$lines_exclude\n$line"
        any_exclude=1
    else 
        lines_include="$lines_include\n$line"
        kill_pids="$kill_pids $pid"
        any_include=1
    fi
done <<< "$out"

if [[ $any_exclude == 1 ]]; then
    echo -e "$lines_exclude"
    echo
fi

if [[ $any_include == 1 ]]; then
    echo -e "$lines_include"
    echo
    echo kill -s KILL $kill_pids
    read -p "Are you sure? [y/n] " -n 1 -r # https://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        kill -s KILL $kill_pids
        echo KILLED
    else
        echo Cancelled.
    fi
else
    echo "No matching process."
fi


