#!/bin/bash
# Author: Gokberk Cinbis, May 2020

set -e
FOO=${TMUX_PARALLEL_EXEC_MAX_PANES_PER_WINDOW:=9}

function __uniqueid__()
{
    # date, time, process info
    local d=`command date +%Y%m%d`
    local t=`command date +%H-%M-%S` # hour.minute.seconds (dots are useful for time, otherwise very unreadible)
    #local host=`hostname`
    local pid="$$"
    echo tmux-parallel-exec_${d}_${t}_${pid}
}

function __tmux__parallel_exec__()
{
    local narg=$#
    local session_name=`__uniqueid__`

    if [ $narg -lt 1 ]
    then
        echo "tmux-parallel-exec <options> <path1> <cmd1> <path2> <cmd2> ... <pathN> <cmdN>"
        echo ""
        echo "Run N commands in parallel via tmux by generating a tmux session and running commands in separate panes & windows"
        echo "Creates a new window every TMUX_PARALLEL_EXEC_MAX_PANES_PER_WINDOW (default 9) panes to avoid too small panes."
        echo ""
        echo "HINTS & NOTES"
        echo "* Automatically generates a tmux session name using current date/time and PID"
        echo ""
        echo "* You may pass arguments within command strings. Example:"
        echo "  tmux-parallel-exec \"echo foo\" \"echo yey\""
        echo ""
        echo "* If you want to a window to close automatically, append <; exit> inside the command. Example:"
        echo "  tmux-parallel-exec \"echo foo\" \"echo yey; exit\""
        echo ""
        echo "* You may create simple loops as commands"
        echo "  tmux-parallel-exec 'while true; do echo w1; sleep 2; done' 'while true; do echo w2; sleep 3; done' 'while true; do echo w3; sleep 1; done'"
        echo ""
        echo "SEE tmux-parallel-exec tmux-parallel-exec-at-dirs"
        exit 1
    fi
  
    local sc=`command mktemp` # temp script
    echo "command tmux new -d -s ${session_name}" > "$sc" # detached
    local j=0
    for (( j=1; j<=$narg; j++ )); do
        echo "command tmux send-keys -t ${session_name} \"'${!j}'\" C-m" >> "$sc"
        if [ $j -lt $narg ]; then
            if (($j > 0)) && ! (($j % $TMUX_PARALLEL_EXEC_MAX_PANES_PER_WINDOW)); then
                echo "command tmux new-window -t ${session_name}" >> "$sc"
            else
                echo "command tmux split-window -v -t ${session_name}" >> "$sc"
                echo "command tmux select-layout -t ${session_name} tiled"  >> "$sc"  # do this after every pane to create space for a new pane
            fi
        fi
    done
    echo "command tmux a -t ${session_name}" >> "$sc" # attach
    # cat "$sc" # just for debug

    # run the script
    command chmod 755 "$sc"
    "$sc"
    command rm -f "$sc"
}

# ok with multiple quoted arguments
__tmux__parallel_exec__ "$@"

# IMPLEMENTATION NOTES
# -- do not use the following single-line tmux call idea:
#       tmux new -s session \; send-keys a C-m \; ...
#    this approach makes it hard to debug & understand when something goes wrong
#    therefore, instead, first create the session in detached mode, send keys to it and then attach to it

